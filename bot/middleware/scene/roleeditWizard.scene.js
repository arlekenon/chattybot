const { Markup, Scenes, Composer } = require("telegraf");
const {roleOptions,keyOptions, iionkeyOptions, addvOptions, persOptions} = require('../../options/keyboard')
const mongoose = require("mongoose");
const {userSchema} = require("../../model/user.model");

const startStep = new Composer();
startStep.hears("–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞üòú", async (ctx) => {
    try {
        ctx.wizard.state.formData = {};
        await ctx.reply("–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", persOptions);
        return ctx.wizard.next();
    } catch (e) {
        console.log(e);
    }
});

const finishStep = new Composer();


finishStep.on("callback_query", async (ctx) => {
    try {
        const connection = await mongoose.createConnection('mongodb://127.0.0.1:27017/test');
        const User = await connection.model('User', userSchema);
        const foundUser = await User.findOne({chatId:ctx.chat.id});

        if ( (foundUser.premium == false) && (  ctx.callbackQuery.data =='–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä' || ctx.callbackQuery.data =='–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç' || ctx.callbackQuery.data =='–ü—Å–∏—Ö–æ–ª–æ–≥' || ctx.callbackQuery.data =='–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç' || ctx.callbackQuery.data =='–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –≥–∏–¥' || ctx.callbackQuery.data =='–í–µ—Å–µ–ª—å—á–∞–∫')) {
            await ctx.reply(`–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞`, keyOptions);
        } else {
            const roleprompt = roleOptions[ctx.callbackQuery.data]
            const updateUser = await User.updateOne({chatId:ctx.chat.id}, {roleoleprompt: roleprompt})
            await ctx.answerCbQuery();
            await ctx.reply(`–¢—ã –≤—ã–±—Ä–∞–ª ${ctx.callbackQuery.data}`, keyOptions);
            return ctx.scene.leave();
        }
    } catch (e) {
        console.log(e);
    }
});

module.exports = new Scenes.WizardScene("roleeditWizard", startStep, finishStep);